REM  *****  BASIC  *****
Rem This Macro was Created by Jorge Sampaio (jrgsampaio@gmail.com) using OO-2.2.0 Running in Linux (Ubuntu) in 2007-July-08
Rem Its functionality results from the efforts and contributions of several members of the OOO-Forum (http://www.oooforum.org)

Option Explicit

Private bTimerRunning as Boolean
Private bTimerCounting as Boolean
Private bTimerLapping as Boolean

Private oDoc as Object
Private oSheet as Object
Private oCell as Object

Private oDialog as Object
Private oDlgDisplay as Object
Private oDlgStartLap as Object
Private oDlgStopReset as Object
Private oDlgInterval as Object
Private oDlgCell as Object
Private oDlgSheet as Object

private lCount as Long
Private tmr_interval as long
Private tmr_sheet as string
Private tmr_cell as string
Const sCalc$ = "com.sun.star.sheet.SpreadsheetDocument"

Sub MyCounter()
	oDoc = ThisComponent
	if not oDoc.SupportsService(sCalc) Then
		print "Extension ""My Counter"" is for Spreadsheet (Calc) only. Sorry."
		exit sub
	end if

	DialogLibraries.LoadLibrary("MyCounterLibrary")
	oDialog = CreateUnoDialog(DialogLibraries.MyCounterLibrary.dlgCounter)
	oDialog.setVisible(true)

	oDlgDisplay = oDialog.GetControl("txtDisplay")
	oDlgStartLap = oDialog.GetControl("btnStartLap")
	oDlgStopReset = oDialog.GetControl("btnStopReset")
	oDlgInterval = oDialog.GetControl("txtInterval")
	oDlgCell = oDialog.GetControl("txtCell")
	oDlgSheet = oDialog.GetControl("txtSheet")
	
	bTimerRunning = True
	bTimerCounting = False
	bTimerLapping = True
	
	tmr_interval = 10
	do while bTimerRunning 'this variable changes to False in TimerExit()
		wait tmr_interval
		if bTimerCounting Then  'this variable changes to True in StartLap() and to False in StopReset()
			if bTimerLapping then   'this variable changes to True or False in StartLap()
				oCell.SetValue(lcount)  'update the cell value
			end if
			oDlgDisplay.text = lcount 'update the display
			lCount = lCount + 1  
		end if
	loop
	oDialog.setVisible(false) 'exit the application
End Sub

private Sub StartLap()
	oDlgInterval.Enable = false  '
	oDlgCell.Enable = false      ' while runing, no change in these values
	oDlgSheet.Enable = false	 '

	if bTimerCounting then  'need to stop... what?
		if bTimerLapping then      'stop updating the cell and display (keep counting)			
			oDlgStartLap.Label = "Resume" '"Start"
			bTimerLapping = False
		else                       ' or stop counting
			oDlgStartLap.Label = "Lap"
			bTimerLapping = True   'if restart, start updating cell and display
		endif
	else                    'if not counting, start counting (and updating)
		oDlgStartLap.Label = "Lap"   'can lap
		oDlgStopReset.Label = "Stop" 'and stop
		SetTimerData
		bTimerCounting = True	
	end if
End Sub
	
private Sub StopReset()
	
	if bTimerCounting then 'if counting, stop!
		bTimerCounting = False
		bTimerLapping = true
		tmr_interval = 10
		oDlgStartLap.Label = "Start"  'can restart
		oDlgStopReset.Label = "Reset" 'and reset

		oDlgInterval.Enable = true '
		oDlgCell.Enable = true	   ' stop conunting, allow change parameters
		oDlgSheet.Enable = true    '
	else                    'if not runing, reset!
		SetTimerData 'read timer parameters after reset (just in case reset is press after load)
		lcount = 0
	endif
	oCell.SetValue(lcount)
	oDlgDisplay.text = lcount
	tmr_interval = 10 'only looping. do fast to avoid much delay.
End Sub

private Sub SetTimerData()
	tmr_sheet = oDlgSheet.text 'get the sheet name
	tmr_cell = oDlgCell.text   'get the cell name
	oSheet = oDoc.Sheets.GetByName(tmr_sheet)    'set a sheet object
	oCell = oSheet.GetCellRangeByName(tmr_cell)  'set a cell object
	lcount = oCell.value                         'get the current value of the cell
	tmr_interval = oDlgInterval.text            'get the interval
	tmr_interval = tmr_interval-1 'this reduction by 1 ms in the time interval seems to give good accuracye for 10, 100, 1000 and 10,000 ms intervals	
End Sub

private Sub TimerExit
	bTimerRunning = False     ' stop the outer loop 
End Sub
